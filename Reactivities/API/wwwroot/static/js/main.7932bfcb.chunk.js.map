{"version":3,"sources":["app/model/pagination.ts","app/api/agent.ts","app/model/activity.ts","app/model/profile.ts","app/stores/activityStore.ts","app/stores/commentStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/AcivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","Object","createClass","data","pagination","classCallCheck","this","PagingParams","pageNumber","arguments","length","undefined","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","concat","response","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","JSON","parse","abrupt","stop","_x","apply","error","_ref2","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","reponse","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","Content-type","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","assign","ActivityFormValues","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","_this","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","activityStore_regeneratorRuntime","result","axiosParams","sent","setActivity","setPagination","setLoadingInitial","t0","console","log","loadActivity","_callee2","_context2","getActivity","runInAction","_activity$attendees","userStore","isGoing","attendees","some","a","isHost","hostUsername","host","find","x","Date","state","createActivity","_ref3","_callee3","attendee","newActivity","_context3","_x2","updateActivity","_ref4","_callee4","_context4","objectSpread2","_x3","deleteActivity","_ref5","_callee5","_context5","_x4","updateAttendance","_callee6","_context6","_this$selectedActivit","_this$selectedActivit2","filter","_this$selectedActivit3","_this$selectedActivit4","finish","cancelActivityToggle","_callee7","_context7","_this$selectedActivit5","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","toConsumableArray","CommentStore","comments","hubConnection","createHubConnection","activityId","_this$hubConnection","_this$hubConnection2","_this$hubConnection3","activityStore","HubConnectionBuilder","withUrl","accessTokenFactory","_store$userStore$user","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","_this$hubConnection4","clearComments","addComment","commentStore_regeneratorRuntime","_store$activityStore$","_this$hubConnection5","invoke","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","ModalStore","modal","open","openModal","content","closeModal","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","profileStore_regeneratorRuntime","photo","_this$profile$photos","photos","isMain","setImage","p","_this$profile$photos2","_x5","_ref6","_store$userStore$user2","followingsCount","_x6","_x7","loadFollowings","_ref7","_x8","loadUserActivities","_ref8","_callee8","_context8","_x9","_x10","UserStore","userStore_regeneratorRuntime","creads","modalStore","logout","getUser","creds","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","_useStore$userStore","react_default","createElement","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","_useStore$activitySto","Fragment","vertical","size","style","width","marginTop","Header","attached","color","active","has","esm","onChange","_userStore$user","_useStore","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","substring","truncate","bio","extra","Icon","profiles_FollowButton","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","profiles_ProfileCard","ActivityListItem","_activity$host","_activity$host2","Segment","Group","Label","textAlign","marginBottom","react_router_dom","secondary","AcivityListItemAttendee","clearing","floated","groupedActivities","slicedToArray","group","react","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","_useState","useState","_useState2","loadingNext","setLoadingNext","useEffect","Grid","Column","react_infinite_scroller_default","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","dashboard_ActivityList","dashboard_ActivityFilters","Loader","MyTextInput","props","_useField","useField","_useField2","field","meta","Form","Field","touched","label","formik_esm","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","users_LoginForm","users_RegisterForm","LoadingComponent","_ref$inverted","_ref$content","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","react_datepicker_min_default","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","translate","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","_ref$activity","relaxed","divided","Extra","details_ActivityDetailedHeader","details_ActivityDetailedInfo","details_ActivityDetailedChat","details_ActivityDetailedSidebar","TestErrors","baseUrl","widths","primary","NotFound","Inline","_commonStore$error","_commonStore$error2","message","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","react_cropper_es","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","_useState3","_useState4","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","_profile$photos","_profile$photos2","_useStore$profileStor","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","profiles_ProfileEditForm","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","profiles_ProfileDescription","profiles_ProfilePhotos","profiles_ProfileActivities","profiles_ProfileFollowings","menuPosition","Statistic","Divider","profiles_ProfileHeader","profiles_ProfileContent","PrivateRoute","Component","component","rest","objectWithoutProperties","_excluded","react_router","location","useLocation","finally","react_toastify","hideProgressBar","modals_ModalContainer","exact","path","HomePage","layout_NavBar","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","ScrollToTop","pathName","scroll","__webpack_require__","__webpack_exports__","src_history","createBrowserHistory","ReactDOM","Provider","layout_App","document","getElementById"],"mappings":"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","file":"static/js/main.7932bfcb.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { URLSearchParams } from 'url';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../model/activity';\r\nimport { PaginatedResult } from '../model/pagination';\r\nimport { Photo, Profile, UserActivity } from '../model/profile';\r\nimport { User, UserFormValues } from '../model/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(100);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch(status) {\r\n        case 400: \r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('not-found');\r\n            }\r\n            if(data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors){\r\n                    if(data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n\r\n                throw modalStateErrors.flat();\r\n            }\r\n            // else {\r\n            //     toast.error(data);\r\n            // }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized!');\r\n            break;\r\n        case 404:\r\n            history.push('not-found');\r\n            break;\r\n        case 500:\r\n           store.commonStore.setServerError(data);\r\n           history.push('server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(reponse: AxiosResponse<T>) => reponse.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body : {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url:string ) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('activities', {params})\r\n    .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues ) => requests.post<User>('/account/login', user) ,\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n            requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities, Account, Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date | null;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if(activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingsCount: number;\r\n    following: boolean;\r\n    photos: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean; \r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../model/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../model/profile\";\r\nimport { Pagination, PagingParams } from \"../model/pagination\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    //activities: Activity[] = [];\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys,\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities()\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MM yyyy h:mm aa');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]; \r\n                return activities  \r\n            }, {} as {[key:string] : Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async() => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n                result.data.forEach(activity => {\r\n                    this.setActivity(activity);\r\n                })\r\n        this.setPagination(result.pagination);\r\n        this.setLoadingInitial(false);\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n        this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async(id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch(error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity(id: string) {\r\n       return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateActivity = async(activity: ActivityFormValues) => {\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id) {\r\n                    let updateActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n            })\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                //this.activities = [...this.activities.filter(a => a.id != id)];\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            }) \r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing)\r\n                {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        }\r\n        catch  (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n    \r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../model/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection?.start().catch(error => console.log('Error establishing the connection'));\r\n\r\n            this.hubConnection?.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = comment.createdAt;\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection?.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = comment.createdAt;\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../model/serverError\";\r\n\r\n\r\nexport default class CommonStore {\r\n    error : ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content; \r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../model/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab : any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async(username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async(file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;  \r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async(photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n     updateProfile = async (profile: Partial<Profile>) => {\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName !== store.userStore.user!.displayName) {\r\n                    store.userStore.user!.displayName = profile.displayName!;\r\n                }\r\n                this.profile = {...this.profile!, ...profile}\r\n            })\r\n        } catch (error) {\r\n            toast.error('Problem updating profile')\r\n        }\r\n    }\r\n\r\n    updateFollowing = async(username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingsCount++ : this.profile.followingsCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async(predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async(username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../model/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creads: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creads);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n}","import { createContext, useContext } from 'react';\r\nimport ActivityStore from './activityStore';\r\nimport CommentStore from './commentStore';\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport UserStore from './userStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Menu, Image } from 'semantic-ui-react';\r\nimport { useStore }  from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted  fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo'></img>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'></Menu.Item>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'></Menu.Item>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'></Button>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>                 \r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached  color='teal' content='Filters' />\r\n                <Menu.Item content='All Activities'\r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}/>\r\n                \r\n                <Menu.Item content=\"I'm going\" \r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n\r\n                <Menu.Item content=\"I'm hosting\"\r\n                   active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    /> \r\n            </Menu>\r\n            <Calendar \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/model/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile} : Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{width: '100%'}}>\r\n            <Button fluid color='teal' \r\n            content={profile.following ? 'Following' : 'Not following'} />\r\n        </Reveal.Content>\r\n        <Reveal.Content hidden style={{width: '100%'}}>\r\n            <Button fluid basic\r\n            color={profile.following ? 'red' : 'green'}\r\n            content={profile.following? 'Unfollow' : 'Follow'} \r\n            loading={loading}\r\n            onClick={(e) => handleFollow(e, profile.username)}/>\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    );\r\n}) ","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {Card, Image, Icon} from 'semantic-ui-react';\r\nimport { Profile } from \"../../app/model/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n\r\n    function truncate(str: string | undefined) {\r\n        if(str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/model/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n            <Popup \r\n                hoverable\r\n                key={attendee.username}\r\n                trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                        <Image size='mini' circular src={attendee.image || '/assets/user.png'} \r\n                        bordered\r\n                        style={attendee.following ? styles : null}\r\n                        />\r\n                    </List.Item>\r\n                }\r\n            >\r\n               <Popup.Content>\r\n                    <ProfileCard profile={attendee}/>\r\n                </Popup.Content>     \r\n            </Popup>\r\n            \r\n            ))}           \r\n        </List>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/model/activity\";\r\nimport ActivityListItemAttendee from \"./AcivityListItemAttendee\"\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`profiles/${activity.hostUsername}`}> {activity.host?.displayName}</Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost &&(\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n               <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n        // <Item key={activity.id}>\r\n        //                 <Item.Header as='a'>{activity.title}</Item.Header>\r\n        //                 <Item.Meta> {activity.date} </Item.Meta>\r\n        //                 <Item.Description>\r\n        //                     <div>{activity.description}</div>\r\n        //                     <div>{activity.city}, {activity.venue}</div>\r\n        //                 </Item.Description>\r\n        //                 <Item.Extra>\r\n        //                         <Button as={Link} to={`/activities/${activity.id}`} floated='right' content='View' color='blue' />\r\n        //                         <Button name={activity.id} \r\n        //                         loading={loading && target === activity.id} \r\n        //                         onClick={(e) => handleActivityDelete(e, activity.id)} \r\n        //                         floated='right' content='Delete' color='red' />\r\n        //                         <Label content={activity.category} />\r\n        //                 </Item.Extra>\r\n        //  </Item>\r\n    )\r\n}","import React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n         {groupedActivities.map(([group, activities]) =>\r\n            <Fragment key={group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity}/>\r\n                        ))}                \r\n            </Fragment>\r\n         )}\r\n        </>\r\n       \r\n    )\r\n\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/model/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n const {activityStore} = useStore(); \r\n const {loadActivities, activityRegistry, setPagingParams, pagination}  = activityStore;\r\n const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n function handleGetNext() {\r\n    setLoadingNext(true);\r\n    setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n    loadActivities().then(() => setLoadingNext(false));\r\n }\r\n\r\n  useEffect(() => {\r\n    if(activityRegistry.size <= 1) loadActivities();\r\n  }, [activityRegistry.size, loadActivities])\r\n\r\n  \r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />   \r\n                        <ActivityListItemPlaceholder />                       \r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll pageStart={0} loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}>\r\n                            <ActivityList />\r\n                    </InfiniteScroll>\r\n                 \r\n                )}        \r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />   \r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const[field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label> \r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}   \r\n        </Form.Field>\r\n    )\r\n}\r\n","import { ErrorMessage, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n                initialValues={{email: '', password: '', error: null}}\r\n                onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}>\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' render={() => <Label style={{marginBottom: 10}}\r\n                        basic color=\"red\" content={errors.error}/>}\r\n                    />\r\n                    <Button positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors} : Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header} from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n                initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n                onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required()\r\n                })}\r\n                >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign Up to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\r\n                    <MyTextInput name='username' placeholder='Username'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' render={() => <ValidationErrors errors={errors.error} /> }\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <><Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/login' size='huge' inverted >\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted >\r\n                        Login!\r\n                    </Button>\r\n\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted >\r\n                        Register!\r\n                    </Button>\r\n                    </>\r\n                    \r\n                )}\r\n                \r\n                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","\r\nimport React from 'react';\r\nimport {Dimmer, Loader} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const[field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label> \r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}   \r\n        </Form.Field>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Label, Select, Form } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label> \r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}   \r\n        </Form.Field>\r\n        \r\n    )\r\n}\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const[field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n           <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n           />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}   \r\n        </Form.Field>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { useParams } from 'react-router';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/model/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required!'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required!').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        } \r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n            validationSchema={validationSchema} \r\n            enableReinitialize \r\n            initialValues={activity}\r\n             onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                  <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' translate=\"yes\" >\r\n                     <MyTextInput placeholder='Title' name='title' />\r\n                     <MyTextArea rows={3} placeholder='Description'  name='description'   />     \r\n                     <MySelectInput options={categoryOptions} placeholder='Category'  name='category'  />\r\n                     <MyDateInput \r\n                        placeholderText='Date' \r\n                        name='date'\r\n                        showTimeSelect\r\n                        timeCaption='time'\r\n                        dateFormat='MMMM d, yyyy h:mm aa'/>\r\n                     <Header content='Location Details' sub color='teal' />\r\n                     <MyTextInput placeholder='City'  name='city'  />\r\n                     <MyTextInput placeholder='Venue'  name='venue'  />\r\n                     <Button\r\n                     disabled={isSubmitting || !dirty || !isValid } \r\n                     loading={isSubmitting} floated='right' positive type='submit' content='Submit'/>\r\n                     <Button as={Link} to='/activities' floated='right' positive type='button' content='Cancel'/>\r\n                 </Form>\r\n                )}\r\n            </Formik> \r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/model/activity';\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n            {format(activity.date!, 'dd MM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik \r\n                        onSubmit={(values, {resetForm}) => \r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                            initialValues={{body: ''}}\r\n                            validationSchema={Yup.object({\r\n                                body: Yup.string().required()\r\n                            })}                       \r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form' translate={undefined}>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if(e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if(e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                    <Comment key={comment.id}>\r\n                         <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                         <Comment.Content>\r\n                             <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                             <Comment.Metadata>\r\n                                 <div>{comment.createdAt} ago</div>\r\n                             </Comment.Metadata>\r\n                             <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                         </Comment.Content>\r\n                     </Comment>\r\n                    ))}\r\n                                                         \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/model/activity';\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {\r\n                    activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                    ribbon color='red' content='Cancelled'/>\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by \r\n                                    <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`} >\r\n                                        {activity.host?.displayName}\r\n                                        </Link>                                     \r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                    <Button \r\n                        color={activity.isCancelled ? 'green' : 'red'}\r\n                        floated='left'\r\n                        basic\r\n                        content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                        onClick={cancelActivityToggle}\r\n                        loading={loading}\r\n                    />\r\n                    <Button as={Link} \r\n                        disabled={activity.isCancelled}\r\n                        to={`/manage/${activity.id}`} \r\n                        color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                    </>                   \r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button\r\n                    disabled={activity.isCancelled} \r\n                    loading={loading}  \r\n                    onClick={updateAttendance} \r\n                    color='teal'>Join Activity\r\n                    </Button>\r\n                )}               \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/model/activity'\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}} : Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>}\r\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                            </Item.Header>\r\n                            {\r\n                                attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useParams } from 'react-router';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    \r\n    useEffect(() => {\r\n        if(id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if(loadingInitial ||  !activity) return <LoadingComponent/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = 'process.env.REACT_APP_API_URL';\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound () {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\nimport {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper src={imagePreview} style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1} aspectRatio={1} preview='.img-preview'\r\n            guides={false} viewMode={1} autoCropArea={1} background={false} onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  } \r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  \r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if(cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/model/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n        uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(''); \r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos'/>\r\n                    {isCurrentUser && (\r\n                        <Button floated=\"left\" basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                         onClick={() => setAddPhotoMode(!addPhotoMode)} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}> \r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                            <Card key={photo.id}>\r\n                            <Image src={photo.url }/>\r\n                            {isCurrentUser && (\r\n                                <Button.Group fluid widths={2}>\r\n                                    <Button\r\n                                        basic\r\n                                        color='green'\r\n                                        content='Main'\r\n                                        name={'main' + photo.id}\r\n                                        loading={target === 'main' + photo.id && loading}\r\n                                        onClick={e => handleSetMainPhoto(photo, e)} \r\n                                    />\r\n                                    <Button basic color='red' icon='trash'\r\n                                        loading={target === photo.id && loading} \r\n                                        onClick={e => handleDeletePhoto(photo, e)}\r\n                                        name={photo.id}\r\n                                        disabled={photo.isMain}\r\n                                    />\r\n                                </Button.Group>\r\n                            )}\r\n                        </Card>\r\n                ))}\r\n            </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n            <Header icon='image' content='Photos'/>\r\n            <Card.Group itemsPerRow={5}>\r\n                {profile.photos?.map(photo => (\r\n                <Card key={photo.id}>\r\n                    <Image src={photo.url }/>\r\n                </Card>\r\n                ))}\r\n            </Card.Group>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Form, Button, Header} from 'semantic-ui-react';\r\nimport { ErrorMessage, Formik } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ProfileEditForm() {\r\n  const {profileStore} = useStore();\r\n\r\nreturn (\r\n  <Formik\r\n  initialValues={{displayName: '', bio: '', error: null}}\r\n  onSubmit={(values, {setErrors}) => profileStore.updateProfile(values).catch(error => \r\n  setErrors({error}))}\r\n  validationSchema={Yup.object({\r\n      displayName: Yup.string().required(),\r\n      bio: Yup.string().required(),\r\n  })}\r\n  >\r\n{({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n  <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n      <Header as='h2' content='Sign Up to Reactivities' color='teal' textAlign='center'/>\r\n      <MyTextInput name='displayName' placeholder='Display Name'/>\r\n      <MyTextInput name='bio' placeholder='Bio'/>\r\n      <ErrorMessage \r\n          name='error' render={() => <ValidationErrors errors={errors.error} /> }\r\n      />\r\n      <Button disabled={!isValid || !dirty || isSubmitting} positive content='Update Profile' type='submit' fluid />\r\n  </Form>\r\n)}\r\n</Formik>\r\n);\r\n \r\n});\r\n","import React, { useState } from 'react';\r\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Profile } from '../../app/model/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileDescription({profile}: Props){\r\n  const {profileStore: {isCurrentUser}} = useStore();\r\n  const [editMode, setEditMode] = useState(false);\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={`About ${profile!.displayName}`}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {editMode ? (\r\n            <ProfileEditForm />\r\n          ) : (\r\n            <span>{profile!.bio}</span>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n\r\n});\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, activeTab} = profileStore;\r\n\r\n    return(\r\n        // loading={loadFollowings}\r\n        <Tab.Pane  > \r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column />\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} /> \r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/model/profile\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'future'}},\r\n    {menuItem: 'Past Events', pane: {key: 'past'}},\r\n    {menuItem: 'Hosting', pane: {key: 'hosting'}}\r\n]\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities, userActivities } = profileStore;\r\n\r\n        useEffect(() => {\r\n            loadUserActivities(profile!.username);\r\n        }, [loadUserActivities, profile])\r\n\r\n        const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n            loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n        };\r\n\r\n        return (\r\n            <Tab.Pane loading={loadingActivities}>\r\n                <Grid>\r\n                    <Grid.Column width={16}>\r\n                        <Header floated=\"left\" icon='calendar' content={'Activities'}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={16}>\r\n                        <Tab panes={panes} menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}/>\r\n                        <br />\r\n                        <Card.Group itemsPerRow={4}>\r\n                            {userActivities.map((activity: UserActivity) => {\r\n                                return (\r\n                                    <Card as={Link} to={`activities/${activity.id}`} key={activity.id}>\r\n                                        <Image src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                         style={{ minHeight: 100, objectFit: 'cover' }} />\r\n\r\n                                         <Card.Content>\r\n                                            <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                            <Card.Meta textAlign='center'>\r\n                                                <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                                <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                            </Card.Meta>\r\n                                         </Card.Content>\r\n                                    </Card>\r\n                                );\r\n                            })}\r\n                        </Card.Group>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Tab.Pane>\r\n        );\r\n        \r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/model/profile\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileDescription from './ProfileDescription';\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileDescription profile={profile}/>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/model/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as='h1' content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingsCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                   <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <ProfileHeader profile={profile}/>}\r\n\r\n                {profile &&\r\n                <ProfileContent profile={profile} /> }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route {...rest} render={(props) => isLoggedIn ? <Component {...props} />: <Redirect to='/' /> } />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container} from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore] )\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading activities..' />\n  return (\n    <>\n        <ToastContainer position='bottom-right' hideProgressBar />\n        <ModalContainer />\n        <Route exact path='/' component={HomePage}/>\n        <Route\n          path={'/(.+)'}\n          render={() => (\n            <>\n              <NavBar></NavBar>\n              <Container style={{marginTop: '7em'}}>\n                <Switch>\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm}/>\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage}/>\n                  <PrivateRoute path='/errors' component={TestErrors}/>\n                  <Route path='/server-error' component={ServerError}/>\n                  <Route component={NotFound}/>\n                </Switch>             \n              </Container>\n            </>\n          )}\n        />\n        \n    </>\n  );\n}\n\nexport default observer(App);\n","import { useEffect } from \"react\";\r\nimport  { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop () {\r\n    const pathName = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scroll(0, 0);\r\n    }, [pathName]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop />\n         <App />\n      </Router>\n    </StoreContext.Provider>,  \n    document.getElementById('root')\n);\n \n\n\n// function createBrowserHistory() {\n//   throw new Error('Function not implemented.');\n// }\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}